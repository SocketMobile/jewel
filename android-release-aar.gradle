/*
Copyright 2017 Robert PÃ¶sel and contributors
Modifications copyright 2018 Enrico Stevenson-Mills

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
apply plugin: 'maven-publish'

def libGroupId = ext.PUBLISH_GROUP_ID
def libArtifactId = ext.PUBLISH_ARTIFACT_ID
def libVersion = ext.PUBLISH_VERSION
def localReleaseDest = "${buildDir}/release/${libVersion}"

task androidJavadocs(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  android.libraryVariants.all { variant ->
    if (variant.name == 'release') {
      owner.classpath += variant.javaCompile.classpath
    }
  }
  exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
  classifier = 'javadoc'
  from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

publishing {
  publications {
    maven(MavenPublication) {
      groupId libGroupId
      artifactId libArtifactId
      version = libVersion

      artifact bundleRelease
      artifact androidJavadocsJar
      artifact androidSourcesJar

      pom.withXml {
        final dependenciesNode = asNode().appendNode('dependencies')

        ext.addDependency = { Dependency dep, String scope ->
          if (dep.group == null ||
              dep.version == null ||
              dep.name == null ||
              dep.name == "unspecified") {
            return
          } // ignore invalid dependencies

          final dependencyNode = dependenciesNode.appendNode('dependency')
          dependencyNode.appendNode('groupId', dep.group)
          dependencyNode.appendNode('artifactId', dep.name)
          dependencyNode.appendNode('version', dep.version)
          dependencyNode.appendNode('scope', scope)

          if (!dep.transitive) {
            // If this dependency is transitive, we should force exclude all its dependencies them from the POM
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            exclusionNode.appendNode('groupId', '*')
            exclusionNode.appendNode('artifactId', '*')
          } else if (!dep.properties.excludeRules.empty) {
            // Otherwise add specified exclude rules
            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
            dep.properties.excludeRules.each { ExcludeRule rule ->
              exclusionNode.appendNode('groupId', rule.group ?: '*')
              exclusionNode.appendNode('artifactId', rule.module ?: '*')
            }
          }
        }

        // List all "api" dependencies (for new Gradle) as "compile" dependencies
        configurations.api.allDependencies.each { dep -> addDependency(dep, "compile") }
        // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
        configurations.implementation.allDependencies.each { dep ->
          if (!configurations.api.allDependencies.contains(dep)) {
            addDependency(dep, "runtime")
          }
        }
      }
    }
  }
}

// Ensure that the publish task depends on assembly
tasks.all { task ->
  if (task instanceof AbstractPublishToMaven) {
    task.dependsOn assemble
  }
}

publishing {
  repositories {
    maven {
      url localReleaseDest
    }
  }
}
